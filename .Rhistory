library(tidyr)
setwd("~/Desktop/Spring 2019/STAT 123/Final Project")
ds <- read_csv("919report_data.csv")
# Cleaning Data
# Functions
fix.time = function(x) {
return(str_split(x, " ", simplify=T)[1,2])
}
clean.up = function(x) {
if (is.na(x)) {
x <- FALSE
} else if (x == 0) {
x <- FALSE
} else {
x <- TRUE
}
}
# Fix and seperate Time
ds$Time = sapply(ds$Time, FUN = fix.time)
ds = ds %>%
mutate(Time=hms::as.hms(Time))
# Time of Day Column
ds = ds %>%
mutate(Time_Of_Day = ifelse(Time < 12*60*60, "Morning", ifelse(Time < 17*60*60, "Afternoon", "Evening")))
# Reorder, rename Columns
ds <- ds[c(1,2,3,43,4:42)]
colnames(ds)[17] <- "Attended By: Fire"
colnames(ds)[42] <- "Event Location: Snack Bar"
# Tranforms with semicolon
for (i in c(12:17, 19:26, 30:42)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(str_split(colnames(ds)[i], ": ")[[1]][2]), NA))
}
# Transforms with no semicolon
for (i in c(11, 27:29)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(colnames(ds)[i]), NA))
}
# Unite transformed Columns
ds <- unite(ds, col = "Incident_Type", matches("Incident"), sep=",")
ds$Incident_Type <- gsub("NA[,]?","", ds$Incident_Type)
ds <- unite(ds, col = "Attended_By", matches("Attended"), sep=",")
ds$Attended_By <- gsub("NA[,]?","", ds$Attended_By)
ds <- unite(ds, col = "Init_Call", matches("Call"), sep=",")
ds$Init_Call <- gsub("NA[,]?","", ds$Init_Call)
ds <- unite(ds, col = "Location", matches("Event"), sep=",")
ds$Location <- gsub("NA[,]?","", ds$Location)
ds = ds %>%
seperate(Location, Location, sep = ",", remove = TRUE)
library(readr)
library(lubridate)
library(tidyverse)
library(tidyr)
setwd("~/Desktop/Spring 2019/STAT 123/Final Project")
ds <- read_csv("919report_data.csv")
# Cleaning Data
# Functions
fix.time = function(x) {
return(str_split(x, " ", simplify=T)[1,2])
}
clean.up = function(x) {
if (is.na(x)) {
x <- FALSE
} else if (x == 0) {
x <- FALSE
} else {
x <- TRUE
}
}
# Fix and seperate Time
ds$Time = sapply(ds$Time, FUN = fix.time)
ds = ds %>%
mutate(Time=hms::as.hms(Time))
# Time of Day Column
ds = ds %>%
mutate(Time_Of_Day = ifelse(Time < 12*60*60, "Morning", ifelse(Time < 17*60*60, "Afternoon", "Evening")))
# Reorder, rename Columns
ds <- ds[c(1,2,3,43,4:42)]
colnames(ds)[17] <- "Attended By: Fire"
colnames(ds)[42] <- "Event Location: Snack Bar"
# Tranforms with semicolon
for (i in c(12:17, 19:26, 30:42)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(str_split(colnames(ds)[i], ": ")[[1]][2]), NA))
}
# Transforms with no semicolon
for (i in c(11, 27:29)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(colnames(ds)[i]), NA))
}
# Unite transformed Columns
ds <- unite(ds, col = "Incident_Type", matches("Incident"), sep=",")
ds$Incident_Type <- gsub("NA[,]?","", ds$Incident_Type)
ds <- unite(ds, col = "Attended_By", matches("Attended"), sep=",")
ds$Attended_By <- gsub("NA[,]?","", ds$Attended_By)
ds <- unite(ds, col = "Init_Call", matches("Call"), sep=",")
ds$Init_Call <- gsub("NA[,]?","", ds$Init_Call)
ds <- unite(ds, col = "Location", matches("Event"), sep=",")
ds$Location <- gsub("NA[,]?","", ds$Location)
ds = ds %>%
separate(Location, Location, sep = ",", remove = TRUE)
library(readr)
library(lubridate)
library(tidyverse)
library(tidyr)
setwd("~/Desktop/Spring 2019/STAT 123/Final Project")
ds <- read_csv("919report_data.csv")
# Cleaning Data
# Functions
fix.time = function(x) {
return(str_split(x, " ", simplify=T)[1,2])
}
clean.up = function(x) {
if (is.na(x)) {
x <- FALSE
} else if (x == 0) {
x <- FALSE
} else {
x <- TRUE
}
}
# Fix and seperate Time
ds$Time = sapply(ds$Time, FUN = fix.time)
ds = ds %>%
mutate(Time=hms::as.hms(Time))
# Time of Day Column
ds = ds %>%
mutate(Time_Of_Day = ifelse(Time < 12*60*60, "Morning", ifelse(Time < 17*60*60, "Afternoon", "Evening")))
# Reorder, rename Columns
ds <- ds[c(1,2,3,43,4:42)]
colnames(ds)[17] <- "Attended By: Fire"
colnames(ds)[42] <- "Event Location: Snack Bar"
# Tranforms with semicolon
for (i in c(12:17, 19:26, 30:42)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(str_split(colnames(ds)[i], ": ")[[1]][2]), NA))
}
# Transforms with no semicolon
for (i in c(11, 27:29)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(colnames(ds)[i]), NA))
}
# Unite transformed Columns
ds <- unite(ds, col = "Incident_Type", matches("Incident"), sep=",")
ds$Incident_Type <- gsub("NA[,]?","", ds$Incident_Type)
ds <- unite(ds, col = "Attended_By", matches("Attended"), sep=",")
ds$Attended_By <- gsub("NA[,]?","", ds$Attended_By)
ds <- unite(ds, col = "Init_Call", matches("Call"), sep=",")
ds$Init_Call <- gsub("NA[,]?","", ds$Init_Call)
ds <- unite(ds, col = "Location", matches("Event"), sep=",")
ds$Location <- gsub("NA[,]?","", ds$Location)
ds = ds %>%
separate(Location, Location2, sep = ",", remove = TRUE)
library(readr)
library(lubridate)
library(tidyverse)
library(tidyr)
setwd("~/Desktop/Spring 2019/STAT 123/Final Project")
ds <- read_csv("919report_data.csv")
# Cleaning Data
# Functions
fix.time = function(x) {
return(str_split(x, " ", simplify=T)[1,2])
}
clean.up = function(x) {
if (is.na(x)) {
x <- FALSE
} else if (x == 0) {
x <- FALSE
} else {
x <- TRUE
}
}
# Fix and seperate Time
ds$Time = sapply(ds$Time, FUN = fix.time)
ds = ds %>%
mutate(Time=hms::as.hms(Time))
# Time of Day Column
ds = ds %>%
mutate(Time_Of_Day = ifelse(Time < 12*60*60, "Morning", ifelse(Time < 17*60*60, "Afternoon", "Evening")))
# Reorder, rename Columns
ds <- ds[c(1,2,3,43,4:42)]
colnames(ds)[17] <- "Attended By: Fire"
colnames(ds)[42] <- "Event Location: Snack Bar"
# Tranforms with semicolon
for (i in c(12:17, 19:26, 30:42)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(str_split(colnames(ds)[i], ": ")[[1]][2]), NA))
}
# Transforms with no semicolon
for (i in c(11, 27:29)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(colnames(ds)[i]), NA))
}
# Unite transformed Columns
ds <- unite(ds, col = "Incident_Type", matches("Incident"), sep=",")
ds$Incident_Type <- gsub("NA[,]?","", ds$Incident_Type)
ds <- unite(ds, col = "Attended_By", matches("Attended"), sep=",")
ds$Attended_By <- gsub("NA[,]?","", ds$Attended_By)
ds <- unite(ds, col = "Init_Call", matches("Call"), sep=",")
ds$Init_Call <- gsub("NA[,]?","", ds$Init_Call)
ds <- unite(ds, col = "Location", matches("Event"), sep=",")
ds$Location <- gsub("NA[,]?","", ds$Location)
ds = ds %>%
separate(Location, "Location", sep = ",", remove = TRUE)
library(readr)
library(lubridate)
library(tidyverse)
library(tidyr)
setwd("~/Desktop/Spring 2019/STAT 123/Final Project")
ds <- read_csv("919report_data.csv")
# Cleaning Data
# Functions
fix.time = function(x) {
return(str_split(x, " ", simplify=T)[1,2])
}
clean.up = function(x) {
if (is.na(x)) {
x <- FALSE
} else if (x == 0) {
x <- FALSE
} else {
x <- TRUE
}
}
# Fix and seperate Time
ds$Time = sapply(ds$Time, FUN = fix.time)
ds = ds %>%
mutate(Time=hms::as.hms(Time))
# Time of Day Column
ds = ds %>%
mutate(Time_Of_Day = ifelse(Time < 12*60*60, "Morning", ifelse(Time < 17*60*60, "Afternoon", "Evening")))
# Reorder, rename Columns
ds <- ds[c(1,2,3,43,4:42)]
colnames(ds)[17] <- "Attended By: Fire"
colnames(ds)[42] <- "Event Location: Snack Bar"
# Tranforms with semicolon
for (i in c(12:17, 19:26, 30:42)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(str_split(colnames(ds)[i], ": ")[[1]][2]), NA))
}
# Transforms with no semicolon
for (i in c(11, 27:29)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(colnames(ds)[i]), NA))
}
# Unite transformed Columns
ds <- unite(ds, col = "Incident_Type", matches("Incident"), sep=",")
ds$Incident_Type <- gsub("NA[,]?","", ds$Incident_Type)
ds <- unite(ds, col = "Attended_By", matches("Attended"), sep=",")
ds$Attended_By <- gsub("NA[,]?","", ds$Attended_By)
ds <- unite(ds, col = "Init_Call", matches("Call"), sep=",")
ds$Init_Call <- gsub("NA[,]?","", ds$Init_Call)
ds <- unite(ds, col = "Location", matches("Event"), sep=",")
ds$Location <- gsub("NA[,]?","", ds$Location)
ds = ds %>%
separate(Location, sep = ",", remove = TRUE)
separate(Init_Call, "Init_Call", sep = ",", remove = TRUE)
ds = ds %>%
separate(Location, "Location", sep = ",", remove = TRUE)
ggplot(ds, aes(x=Time, y=Location)) + geom_point()
cor(ds$Time, ds$Location)
library(readr)
library(lubridate)
library(tidyverse)
library(tidyr)
setwd("~/Desktop/Spring 2019/STAT 123/Final Project")
ds <- read_csv("919report_data.csv")
# Cleaning Data
# Functions
fix.time = function(x) {
return(str_split(x, " ", simplify=T)[1,2])
}
clean.up = function(x) {
if (is.na(x)) {
x <- FALSE
} else if (x == 0) {
x <- FALSE
} else {
x <- TRUE
}
}
# Fix and seperate Time
ds$Time = sapply(ds$Time, FUN = fix.time)
ds = ds %>%
mutate(Time=hms::as.hms(Time))
# Time of Day Column
ds = ds %>%
mutate(Time_Of_Day = ifelse(Time < 12*60*60, "Morning", ifelse(Time < 17*60*60, "Afternoon", "Evening")))
# Reorder, rename Columns
ds <- ds[c(1,2,3,43,4:42)]
colnames(ds)[17] <- "Attended By: Fire"
colnames(ds)[42] <- "Event Location: Snack Bar"
# Tranforms with semicolon
for (i in c(12:17, 19:26, 30:42)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(str_split(colnames(ds)[i], ": ")[[1]][2]), NA))
}
# Transforms with no semicolon
for (i in c(11, 27:29)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(colnames(ds)[i]), NA))
}
# Unite transformed Columns
ds <- unite(ds, col = "Incident_Type", matches("Incident"), sep=",")
ds$Incident_Type <- gsub("NA[,]?","", ds$Incident_Type)
ds <- unite(ds, col = "Attended_By", matches("Attended"), sep=",")
ds$Attended_By <- gsub("NA[,]?","", ds$Attended_By)
ds <- unite(ds, col = "Init_Call", matches("Call"), sep=",")
ds$Init_Call <- gsub("NA[,]?","", ds$Init_Call)
ds <- unite(ds, col = "Location", matches("Event"), sep=",")
ds$Location <- gsub("NA[,]?","", ds$Location)
ds = ds %>%
separate(Location, "Location", sep = ",", remove = TRUE) %>%
seperate(Init_Call, "Init_Call", sep = ",", remove = TRUE)
library(readr)
library(lubridate)
library(tidyverse)
library(tidyr)
setwd("~/Desktop/Spring 2019/STAT 123/Final Project")
ds <- read_csv("919report_data.csv")
# Cleaning Data
# Functions
fix.time = function(x) {
return(str_split(x, " ", simplify=T)[1,2])
}
clean.up = function(x) {
if (is.na(x)) {
x <- FALSE
} else if (x == 0) {
x <- FALSE
} else {
x <- TRUE
}
}
# Fix and seperate Time
ds$Time = sapply(ds$Time, FUN = fix.time)
ds = ds %>%
mutate(Time=hms::as.hms(Time))
# Time of Day Column
ds = ds %>%
mutate(Time_Of_Day = ifelse(Time < 12*60*60, "Morning", ifelse(Time < 17*60*60, "Afternoon", "Evening")))
# Reorder, rename Columns
ds <- ds[c(1,2,3,43,4:42)]
colnames(ds)[17] <- "Attended By: Fire"
colnames(ds)[42] <- "Event Location: Snack Bar"
# Tranforms with semicolon
for (i in c(12:17, 19:26, 30:42)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(str_split(colnames(ds)[i], ": ")[[1]][2]), NA))
}
# Transforms with no semicolon
for (i in c(11, 27:29)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(colnames(ds)[i]), NA))
}
# Unite transformed Columns
ds <- unite(ds, col = "Incident_Type", matches("Incident"), sep=",")
ds$Incident_Type <- gsub("NA[,]?","", ds$Incident_Type)
ds <- unite(ds, col = "Attended_By", matches("Attended"), sep=",")
ds$Attended_By <- gsub("NA[,]?","", ds$Attended_By)
ds <- unite(ds, col = "Init_Call", matches("Call"), sep=",")
ds$Init_Call <- gsub("NA[,]?","", ds$Init_Call)
ds <- unite(ds, col = "Location", matches("Event"), sep=",")
ds$Location <- gsub("NA[,]?","", ds$Location)
ds = ds %>%
separate(Location, "Location", sep = ",", remove = TRUE) %>%
separate(Init_Call, "Init_Call", sep = ",", remove = TRUE)
library(readr)
library(lubridate)
library(tidyverse)
library(tidyr)
setwd("~/Desktop/Spring 2019/STAT 123/Final Project")
ds <- read_csv("919report_data.csv")
# Cleaning Data
# Functions
fix.time = function(x) {
return(str_split(x, " ", simplify=T)[1,2])
}
clean.up = function(x) {
if (is.na(x)) {
x <- FALSE
} else if (x == 0) {
x <- FALSE
} else {
x <- TRUE
}
}
# Fix and seperate Time
ds$Time = sapply(ds$Time, FUN = fix.time)
ds = ds %>%
mutate(Time=hms::as.hms(Time))
# Time of Day Column
ds = ds %>%
mutate(Time_Of_Day = ifelse(Time < 12*60*60, "Morning", ifelse(Time < 17*60*60, "Afternoon", "Evening")))
# Reorder, rename Columns
ds <- ds[c(1,2,3,43,4:42)]
colnames(ds)[17] <- "Attended By: Fire"
colnames(ds)[42] <- "Event Location: Snack Bar"
# Tranforms with semicolon
for (i in c(12:17, 19:26, 30:42)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(str_split(colnames(ds)[i], ": ")[[1]][2]), NA))
}
# Transforms with no semicolon
for (i in c(11, 27:29)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(colnames(ds)[i]), NA))
}
# Unite transformed Columns
ds <- unite(ds, col = "Incident_Type", matches("Incident"), sep=",")
ds$Incident_Type <- gsub("NA[,]?","", ds$Incident_Type)
ds <- unite(ds, col = "Attended_By", matches("Attended"), sep=",")
ds$Attended_By <- gsub("NA[,]?","", ds$Attended_By)
ds <- unite(ds, col = "Init_Call", matches("Call"), sep=",")
ds$Init_Call <- gsub("NA[,]?","", ds$Init_Call)
ds <- unite(ds, col = "Location", matches("Event"), sep=",")
ds$Location <- gsub("NA[,]?","", ds$Location)
ds = ds %>%
separate(Init_Call, "Initial Call", sep = ",", remove = TRUE) %>%
separate(Attended_By, "Attended By", sep = ",", remove = TRUE) %>%
separate(Incident_Type, "Incident Type", sep = ",", remove = TRUE) %>%
separate(Location, "Location", sep = ",", remove = TRUE)
ggplot(data.frame(ds$Time), aes(x=ds$Time)) +
geom_bar()
ggplot(data.frame(ds$Time), aes(x=ds$Time)) +
geom_density()
ggplot(data.frame(ds$Time), aes(x=ds$Time)) +
geom_histogram()
ggplot(data.frame(ds$Time_Of_Day), aes(x=ds$Time_Of_Day)) +
geom_histogram()
ggplot(data.frame(ds$Time), aes(x=ds$Time)) +
geom_histogram()
ggplot(data.frame(ds$Time), aes(x=ds$Time)) +
geom_dotplot()
ggplot(data.frame(ds$Time), aes(x=ds$Time)) +
geom_area()
ggplot(data.frame(ds$Time), aes(x=ds$Time)) +
geom_density()
ggplot(data.frame(ds$Time), aes(x=ds$Time)) +
geom_freqpoly()
ggplot(data.frame(ds$Time), aes(x=ds$Time)) +
geom_histogram()
ggplot(ds, aes(x=Location, y=Time)) +
geom_bar()
ggplot(ds, aes(x=Time, y=Location)) +
geom_bar()
ggplot(ds, aes(x=Location, y=Time)) +
geom_bar()
ggplot(ds, aes(x=Location, y=Time)) +
geom_bar(stat = "identity")
ggplot(ds, aes(x=Location, y=Time)) +
geom_bar(stat = "count")
ggplot(ds, aes(x=Time, y=Location)) +
geom_bar(stat = "identity")
ggplot(ds, aes(x=Location, y=count(Time))) +
geom_bar()
ggplot(ds, aes(x=Location, y=Time)) +
geom_bar()
ggplot(ds, aes(x=Location, y=Time_Of_Day)) +
geom_bar()
ggplot(ds, aes(x=Location, y=Time_Of_Day)) +
geom_bar()
ggplot(ds, aes(x=Location, y=Time_Of_Day)) +
geom_bar()
ggplot(ds, aes(x=Location, y=Time_Of_Day)) +
geom_point()
ggplot(ds, aes(x=Time_Of_Day, y=Location)) +
geom_point()
ggplot(ds, aes(x=Time, y=Location)) +
geom_point()
ggplot(ds, aes(x=Time_Of_Day, y=Location)) +
geom_bar()
ggplot(ds, aes(x=Time_Of_Day, y=Location)) +
geom_bar()
ggplot(ds, aes(x=Location, y=Time_Of_Day)) +
geom_bar()
ggplot(ds, aes(x=Location, y=Time_Of_Day)) +
geom_bar()
ggplot(ds, aes(x=Time, y=Location)) +
geom_point()
ggplot(ds, aes(x = Time,
fill = Location,
color = Location)) +
geom_freqpoly(binwidth = 60 * 30) +
scale_x_datetime(date_breaks = "4 hours", date_labels = "%H:%M")
ggplot(ds, aes(x = Time,
fill = Location,
color = Location)) +
geom_freqpoly(binwidth = 60 * 30)
ggplot(ds, aes(x = Time,
fill = Location,
color = Location)) +
geom_histogram(binwidth = 60 * 30)
ggplot(ds, aes(x = Time,
fill = Location,
color = Location)) +
geom_density(binwidth = 60 * 30)
ggplot(ds, aes(x = Time,
fill = Location,
color = Location)) +
geom_area(binwidth = 60 * 30)
ggplot(ds, aes(x = Time,
fill = Location,
color = Location)) +
geom_freqpoly(binwidth = 60 * 30)
summary(ds)
ggplot(ds, aes(x = Time,
fill = Location,
color = Location)) +
geom_freqpoly(binwidth = 60 * 30) +
scale_x_datetime(date_breaks = "4 hours", date_labels = "%H:%M")
