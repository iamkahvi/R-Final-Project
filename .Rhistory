# Fix and seperate Time
ds$Time = sapply(strsplit(as.character(ds$Time), " "), tail, n = 1)
ds = ds %>%
mutate(Time=hms::as.hms(Time))
# Time of Day Column
ds = ds %>%
mutate(Time_Of_Day = ifelse(Time < 12*60*60, "Morning", ifelse(Time < 17*60*60, "Afternoon", "Evening")))
# Reorder, rename Columns
ds <- ds[c(1,2,3,43,4:42)]
colnames(ds)[17] <- "Attended By: Fire"
colnames(ds)[42] <- "Event Location: Snack Bar"
# Tranforms with semicolon
for (i in c(12:17, 19:26, 30:42)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(str_split(colnames(ds)[i], ": ")[[1]][2]), NA))
}
# Transforms with no semicolon
for (i in c(11, 27:29)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(colnames(ds)[i]), NA))
}
# Unite transformed Columns
ds <- unite(ds, col = "Incident_Type", matches("Incident"), sep=",")
ds$Incident_Type <- gsub("NA[,]?","", ds$Incident_Type)
ds$Incident_Type <- gsub("^$", NA, ds$Incident_Type)
ds <- unite(ds, col = "Attended_By", matches("Attended"), sep=",")
ds$Attended_By <- gsub("NA[,]?","", ds$Attended_By)
ds$Attended_By <- gsub("^$", NA, ds$Attended_By)
ds <- unite(ds, col = "Init_Call", matches("Call"), sep=",")
ds$Init_Call <- gsub("NA[,]?","", ds$Init_Call)
ds$Init_Call <- gsub("^$", NA, ds$Init_Call)
ds <- unite(ds, col = "Location", matches("Event"), sep=",")
ds$Location <- gsub("NA[,]?","", ds$Location)
ds$Location <- gsub("^$", NA, ds$Location)
ds = ds %>%
separate(Incident_Type, "Incident Type", sep = ",", remove = TRUE) %>%
separate(Attended_By, "Attended By", sep = ",", remove = TRUE) %>%
separate(Init_Call, "Initial Call", sep = ",", remove = TRUE) %>%
separate(Location, "Location", sep = ",", remove = TRUE)
# ds$Incident_Type <- factor(ds$Incident_Type)
ds$Attended_By <- factor(ds$Attended_By)
setwd("~/Desktop/Spring 2019/STAT 123/Final Project")
ds <- read_csv("Data/919report_data.csv")
# Functions
clean.up = function(x) {
if (is.na(x)) {
x <- FALSE
} else if (x == 0) {
x <- FALSE
} else {
x <- TRUE
}
}
# Fix and seperate Time
ds$Time = sapply(strsplit(as.character(ds$Time), " "), tail, n = 1)
ds = ds %>%
mutate(Time=hms::as.hms(Time))
# Time of Day Column
ds = ds %>%
mutate(Time_Of_Day = ifelse(Time < 12*60*60, "Morning", ifelse(Time < 17*60*60, "Afternoon", "Evening")))
# Reorder, rename Columns
ds <- ds[c(1,2,3,43,4:42)]
colnames(ds)[17] <- "Attended By: Fire"
colnames(ds)[42] <- "Event Location: Snack Bar"
# Tranforms with semicolon
for (i in c(12:17, 19:26, 30:42)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(str_split(colnames(ds)[i], ": ")[[1]][2]), NA))
}
# Transforms with no semicolon
for (i in c(11, 27:29)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(colnames(ds)[i]), NA))
}
# Unite transformed Columns
ds <- unite(ds, col = "Incident_Type", matches("Incident"), sep=",")
ds$Incident_Type <- gsub("NA[,]?","", ds$Incident_Type)
ds$Incident_Type <- gsub("^$", NA, ds$Incident_Type)
ds <- unite(ds, col = "Attended_By", matches("Attended"), sep=",")
ds$Attended_By <- gsub("NA[,]?","", ds$Attended_By)
ds$Attended_By <- gsub("^$", NA, ds$Attended_By)
ds <- unite(ds, col = "Init_Call", matches("Call"), sep=",")
ds$Init_Call <- gsub("NA[,]?","", ds$Init_Call)
ds$Init_Call <- gsub("^$", NA, ds$Init_Call)
ds <- unite(ds, col = "Location", matches("Event"), sep=",")
ds$Location <- gsub("NA[,]?","", ds$Location)
ds$Location <- gsub("^$", NA, ds$Location)
ds = ds %>%
separate(Incident_Type, "Incident Type", sep = ",", remove = TRUE) %>%
separate(Attended_By, "Attended By", sep = ",", remove = TRUE) %>%
separate(Init_Call, "Initial Call", sep = ",", remove = TRUE) %>%
separate(Location, "Location", sep = ",", remove = TRUE)
ds$Location <- factor(ds$Location)
ds$Location <- fct_infreq(ds$Location)
ggplot(data.frame(ds$Time_Of_Day), aes(x=ds$Time_Of_Day)) +
geom_bar()
ggplot(data.frame(ds$Time), aes(x=ds$Time)) +
geom_histogram()
scale_x_datetime(breaks = date_breaks("2 hour"), labels = date_format("%I:%M %p"))
ggplot(data.frame(ds$Time), aes(x=as.POSIXct(strptime(ds$Time, format="%H:%M:%S")))) +
geom_histogram() +
scale_x_datetime(breaks = date_breaks("2 hour"), labels = date_format("%I:%M %p"))
ggplot(data.frame(ds$Time), aes(x=as.POSIXct(strptime(ds$Time, format="%H:%M:%S")))) +
geom_histogram(breaks = date_breaks("2 hour"), labels = date_format("%I:%M %p")) +
scale_x_datetime()
ggplot(data.frame(ds$Time), aes(x=as.POSIXct(strptime(ds$Time, format="%H:%M:%S")))) +
geom_histogram(breaks = date_breaks("2 hour")) +
scale_x_datetime(breaks = date_breaks("2 hour"), labels = date_format("%I:%M %p"))
ggplot(data.frame(ds$Time), aes(x=as.POSIXct(strptime(ds$Time, format="%H:%M:%S")))) +
geom_histogram() +
scale_x_datetime(breaks = date_breaks("2 hour"), labels = date_format("%I:%M %p"))
scale_x_datetime(breaks = date_breaks("2 hour"), labels = date_format("%I:%M %p"))
scale_x_datetime(breaks = date_breaks("2 hour"), labels = date_format("%I:%M %p"))
ggplot(data.frame(ds$Time), aes(x=as.POSIXct(strptime(ds$Time, format="%H:%M:%S")))) +
geom_histogram() +
xlab("Time") +
ylab("Frequency") +
scale_x_datetime(breaks = date_breaks("2 hour"), labels = date_format("%I:%M %p"))
ggplot(data.frame(ds$Time_Of_Day), aes(x=ds$Time_Of_Day)) +
geom_bar()
ggplot(data.frame(ds$Time_Of_Day), aes(x=ds$Time_Of_Day)) +
geom_bar() +
xlab("Time of Day")
ggplot(data.frame(ds$Time_Of_Day), aes(x=ds$Time_Of_Day)) +
geom_bar() +
xlab("Time of Day")
ggplot(data.frame(ds$Time), aes(x=as.POSIXct(strptime(ds$Time, format="%H:%M:%S")))) +
geom_histogram() +
xlab("Time") +
ylab("Frequency") +
scale_x_datetime(breaks = date_breaks("2 hour"), labels = date_format("%I:%M %p"))
library(readr)
library(lubridate)
library(tidyverse)
library(tidyr)
library(viridis)
library(scales)
setwd("~/Desktop/Spring 2019/STAT 123/Final Project")
ds <- read_csv("Data/919report_data.csv")
# Functions
clean.up = function(x) {
if (is.na(x)) {
x <- FALSE
} else if (x == 0) {
x <- FALSE
} else {
x <- TRUE
}
}
# Fix and seperate Time
ds$Time = sapply(strsplit(as.character(ds$Time), " "), tail, n = 1)
ds = ds %>%
mutate(Time=hms::as.hms(Time))
# Time of Day Column
ds = ds %>%
mutate(Time_Of_Day = ifelse(Time < 12*60*60, "Morning", ifelse(Time < 17*60*60, "Afternoon", "Evening")))
# Reorder, rename Columns
ds <- ds[c(1,2,3,43,4:42)]
colnames(ds)[17] <- "Attended By: Fire"
colnames(ds)[42] <- "Event Location: Snack Bar"
# Tranforms with semicolon
for (i in c(12:17, 19:26, 30:42)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(str_split(colnames(ds)[i], ": ")[[1]][2]), NA))
}
# Transforms with no semicolon
for (i in c(11, 27:29)) {
ds[i] <- apply(ds[i], MARGIN = 1, FUN = clean.up)
ds[i] <- transform(ifelse(ds[i] == TRUE, paste(colnames(ds)[i]), NA))
}
# Unite transformed Columns
ds <- unite(ds, col = "Incident_Type", matches("Incident"), sep=",")
ds$Incident_Type <- gsub("NA[,]?","", ds$Incident_Type)
ds$Incident_Type <- gsub("^$", NA, ds$Incident_Type)
ds <- unite(ds, col = "Attended_By", matches("Attended"), sep=",")
ds$Attended_By <- gsub("NA[,]?","", ds$Attended_By)
ds$Attended_By <- gsub("^$", NA, ds$Attended_By)
ds <- unite(ds, col = "Init_Call", matches("Call"), sep=",")
ds$Init_Call <- gsub("NA[,]?","", ds$Init_Call)
ds$Init_Call <- gsub("^$", NA, ds$Init_Call)
ds <- unite(ds, col = "Location", matches("Event"), sep=",")
ds$Location <- gsub("NA[,]?","", ds$Location)
ds$Location <- gsub("^$", NA, ds$Location)
ds = ds %>%
separate(Incident_Type, "Incident Type", sep = ",", remove = TRUE) %>%
separate(Attended_By, "Attended By", sep = ",", remove = TRUE) %>%
separate(Init_Call, "Initial Call", sep = ",", remove = TRUE) %>%
separate(Location, "Location", sep = ",", remove = TRUE)
ds$Location <- factor(ds$Location)
ds$Location <- fct_infreq(ds$Location)
summary(ds)
ggplot(data.frame(ds$Time_Of_Day), aes(x=ds$Time_Of_Day)) +
geom_bar() +
xlab("Time of Day")
ggplot(data.frame(ds$Time), aes(x=as.POSIXct(strptime(ds$Time, format="%H:%M:%S")))) +
geom_histogram() +
xlab("Time") +
ylab("Frequency") +
scale_x_datetime(breaks = date_breaks("2 hour"), labels = date_format("%I:%M %p"))
ggplot(ds, aes(x=Time, y=Location)) +
geom_point()
ggplot(data.frame(ds$Time_Of_Day), aes(x=ds$Time_Of_Day)) +
geom_bar() +
xlab("Time of Day")
#read in .csv file
salary<-read.csv('../Data/salaryInfo.csv')
summary(salary)
#convert to short names
names(salary)
names(salary)<-c('Term','WTNum','GR.UG','SalMonthRaw')
#remove the zero salaries
salarynz<-subset(salary, SalMonthRaw!=0)
summary(salarynz)
hist(salarynz$SalMonthRaw)
salarynz[salarynz$SalMonthRaw<1000,]
salarynz$SalMonth<-salarynz$SalMonthRaw
#assume that salaries <$1000 are weekly
salarynz$SalMonth[salarynz$SalMonthRaw<1000]<-
salarynz$SalMonthRaw[salarynz$SalMonthRaw<1000]*4
summary(salarynz)
hist(salarynz$SalMonth)
summary(salarynz$WTNum)
#remove the student with unknown workterm
salarynz[salarynz$WTNum=='N/A',]
salarynz<-salarynz[salarynz$WTNum!='N/A',]
summary(salarynz)
hist(salarynz$SalMonth, main='Monthly Engin/Math Co-op salaries',
xlab='Monthly salary $')
#read in .csv file
salary<-read.csv('../Data/stat123_regression.csv')
#read in .csv file
salary <- read.csv('../Data/stat123_regression.csv')
#read in .csv file
salary <- read.csv('../Data/stat123_regression.csv')
#read in .csv file
salary <- read.csv('Data/stat123_regression.csv')
summary(salary)
```{r}
summary(df)
#read in .csv file
df <- read.csv('Data/stat123_regression.csv')
summary(df)
boxplot(KBI~ADL,data = df, main="Boxplot of ADL",
xlab="KBI", ylab="ADL")
boxplot(ADL~KBI,data = df, main="Boxplot of ADL",
xlab="KBI", ylab="ADL")
#extract out WorkTerm 1 salaries
ywt1<-subset(salarynz,salarynz$WTNum=='W-1')
summary(ywt1)
ywt1<-ywt1[,-4]
summary(ywt1)
ywt1$WTNum<-factor(ywt1$WTNum)
rownames(ywt1)<-NULL
summary(ywt1)
#analyze WorkTerm 1 salaries
dim(ywt1)
n<-dim(ywt1)[1]
summary(ywt1$SalMonth)
hist(ywt1$SalMonth, main='Work Term 1 Salaries', xlab='Monthly Salaries $')
summary(salarynz)
summary(salarynz$WTNum)
#there is an un-used level "N/A" which we need to remove
salarynz$WTNum<-factor(salarynz$WTNum)
summary(salarynz$WTNum)
salarynz$WTNumN<-as.numeric(salarynz$WTNum)
summary(salarynz$WTNumN)
#Graph the data; side-by-side boxplots are one of my favourites
boxplot(salarynz$SalMonth~salarynz$WTNum, xlab='Work Term Number',ylab='monthly salary',
main='Monthly Salary versus Work Term Number')
plot(salarynz$WTNumN, salarynz$SalMonth, xlab='Work Term Number',ylab='monthly salary',
main='Monthly Salary versus Work Term Number')
##############################################################################################
Sal.lm<-lm(SalMonth~WTNumN, data=salarynz)
summary(Sal.lm)
####################################
##Check the model
plot(Sal.lm,which=1:2)
# 1: Residuals VS Fitted values plot: Any any special pattern, we will conclude that the residuals have a constance varaince.
# 2: Normal Q-Q plot: if all of scatters are roughly on a straight line, we will conclude the residuals follow a normal distribution.
###############################summary(cars)
dim(cars)   #shape of database
head(cars)   #look at top rows
tail(cars)   #look at bottom rows
sd(cars$speed)  #standard deviation of speed
sd(cars$dist)   #standard deviation of dist
plot(cars)
plot(cars$speed, cars$dist,
main='Scatterplot Distance vs Speed',
xlab='speed', ylab='distance')
boxplot(cars$speed, main='Boxplot of Speed')
hist(cars$speed, main='Histogram of Speed')
cars.lm <- lm(dist~speed, data=cars)   #lm fits a linear model dist = beta_0 + beta_1 speed
cars.lm                                # display the estimates of beta_0  and beta_1
summary(cars.lm)
cars.lmconf <- confint(cars.lm)         #95% confidence intervals for beta_0, beta_1
cars.lmconf
plot(cars$speed, cars$dist,
main='Scatterplot Distance vs Speed',
xlab='speed', ylab='distance')
abline(cars.lm)  #adds LS fitted line
boxplot(KBI~ADL,data = df, main="Boxplot of ADL",
xlab="total activities of daily living", ylab="Korean Burden Inventory")
plot(df$ADL, df$KBI,
main='ADL vs KBI',
xlab="total activities of daily living", ylab="Korean Burden Inventory")
plot(df$ADL, df$KBI,
main='ADL vs KBI',
xlab="total activities of daily living", ylab="Korean Burden Inventory")
plot(df$MEM, df$KBI,
main='MEM vs KBI',
xlab="memory and behavioral problems", ylab="Korean Burden Inventory")
plot(df$COG, df$KBI,
main='COG vs KBI',
xlab="cognitive impairment", ylab="Korean Burden Inventory")
plot(df$ADL, df$KBI,
main='KBI vs ADL',
xlab="total activities of daily living", ylab="Korean Burden Inventory")
plot(df$MEM, df$KBI,
main='KBI vs MEM',
xlab="memory and behavioral problems", ylab="Korean Burden Inventory")
plot(df$COG, df$KBI,
main='KBI vs COG',
xlab="cognitive impairment", ylab="Korean Burden Inventory")
plot(df$ADL, df$KBI,
main='KBI vs ADL',
xlab="total activities of daily living", ylab="Korean Burden Inventory")
plot(df$MEM, df$KBI,
main='KBI vs MEM',
xlab="memory and behavioral problems", ylab="Korean Burden Inventory")
plot(df$COG, df$KBI,
main='KBI vs COG',
xlab="cognitive impairment", ylab="Korean Burden Inventory")
boxplot(KBI~ADL,data = df, main="Activities of Daily Living vs KBI",
xlab="total activities of daily living", ylab="Korean Burden Inventory")
boxplot(KBI~ADL,data = df, main="KBI vs Activities of Daily Living",
xlab="total activities of daily living", ylab="Korean Burden Inventory")
boxplot(df$ADL)
#read in .csv file
salary<-read.csv('../Data/salaryInfo.csv')
summary(salary)
#convert to short names
names(salary)
names(salary)<-c('Term','WTNum','GR.UG','SalMonthRaw')
#remove the zero salaries
salarynz<-subset(salary, SalMonthRaw!=0)
summary(salarynz)
hist(salarynz$SalMonthRaw)
salarynz[salarynz$SalMonthRaw<1000,]
salarynz$SalMonth<-salarynz$SalMonthRaw
#assume that salaries <$1000 are weekly
salarynz$SalMonth[salarynz$SalMonthRaw<1000]<-
salarynz$SalMonthRaw[salarynz$SalMonthRaw<1000]*4
summary(salarynz)
hist(salarynz$SalMonth)
summary(salarynz$WTNum)
#remove the student with unknown workterm
salarynz[salarynz$WTNum=='N/A',]
salarynz<-salarynz[salarynz$WTNum!='N/A',]
summary(salarynz)
hist(salarynz$SalMonth, main='Monthly Engin/Math Co-op salaries',
xlab='Monthly salary $')
#extract out WorkTerm 1 salaries
ywt1<-subset(salarynz,salarynz$WTNum=='W-1')
summary(ywt1)
ywt1<-ywt1[,-4]
summary(ywt1)
ywt1$WTNum<-factor(ywt1$WTNum)
rownames(ywt1)<-NULL
summary(ywt1)
#analyze WorkTerm 1 salaries
dim(ywt1)
n<-dim(ywt1)[1]
summary(ywt1$SalMonth)
hist(ywt1$SalMonth, main='Work Term 1 Salaries', xlab='Monthly Salaries $')
ggplot(data = salarynz, aes(x=salarynz$SalMonth)) +
geom_histogram() +
facet_grid(. ~salarynz$WTNum)
ggplot(data = salarynz, aes(x=salarynz$SalMonth)) +
geom_histogram() +
facet_wrap(~salarynz$WTNum)
salarynz %>%
filter(salarynz$WTNum %in% c("W-1", "W-2")) %>%
ggplot(., aes(x=salarynz$SalMonth)) +
geom_histogram() +
facet_wrap(~salarynz$WTNum)
salarynz %>%
filter(salarynz$WTNum %in% c("W-1", "W-2")) %>%
ggplot(aes(x=salarynz$SalMonth)) +
geom_histogram() +
facet_wrap(~salarynz$WTNum)
salarynz %>%
filter(salarynz$WTNum %in% c("W-1", "W-2")) %>%
ggplot(aes(x=salarynz$SalMonth)) +
geom_histogram()
salarynz %>%
filter(salarynz$WTNum == "W-1") %>%
ggplot(aes(x=salarynz$SalMonth)) +
geom_histogram()
hist(ywt1$SalMonth, main='Work Term 1 Salaries', xlab='Monthly Salaries $')
salarynz %>%
filter(WTNum == "W-1") %>%
ggplot(aes(x=salarynz$SalMonth)) +
geom_histogram()
salarynz %>%
filter(WTNum == "W-1") %>%
ggplot(aes(x=SalMonth)) +
geom_histogram()
salarynz %>%
filter(WTNum %in% c("W-1","W-2")) %>%
ggplot(aes(x=SalMonth)) +
geom_histogram() +
facet_wrap(~WTNum)
lmADL = lm(KBI~ADL, data = df)
summary(lmADL)
lmADL = lm(KBI~ADL, data = df)
summary(lmADL)
lmMEM = lm(KBI~MEM, data = df)
summary(lmMEM)
lmCOG = lm(KBI~COG, data = df)
summary(LMCOG)
lmADL = lm(KBI~ADL, data = df)
summary(lmADL)
lmMEM = lm(KBI~MEM, data = df)
summary(lmMEM)
lmCOG = lm(KBI~COG, data = df)
summary(lmCOG)
plot(cars)
plot(cars$speed, cars$dist,
main='Scatterplot Distance vs Speed',
xlab='speed', ylab='distance')
boxplot(cars$speed, main='Boxplot of Speed')
hist(cars$speed, main='Histogram of Speed')
cars.lm <- lm(dist~speed, data=cars)   #lm fits a linear model dist = beta_0 + beta_1 speed
cars.lm                                # display the estimates of beta_0  and beta_1
summary(cars.lm)
cars.lmconf <- confint(cars.lm)         #95% confidence intervals for beta_0, beta_1
cars.lmconf
plot(cars$speed, cars$dist,
main='Scatterplot Distance vs Speed',
xlab='speed', ylab='distance')
abline(cars.lm)  #adds LS fitted line
abline(lmCOG)
plot(df$COG, df$KBI,
main='KBI vs COG',
xlab="cognitive impairment", ylab="Korean Burden Inventory")
abline(lmCOG)
adlPlot <- plot(df$ADL, df$KBI,
main='KBI vs ADL',
xlab="total activities of daily living", ylab="Korean Burden Inventory")
memPlot <- plot(df$MEM, df$KBI,
main='KBI vs MEM',
xlab="memory and behavioral problems", ylab="Korean Burden Inventory")
cogPlot <- plot(df$COG, df$KBI,
main='KBI vs COG',
xlab="cognitive impairment", ylab="Korean Burden Inventory")
cogPlot
abline(lmCOG)
cogPlot
adlPlot <- plot(df$ADL, df$KBI,
main='KBI vs ADL',
xlab="total activities of daily living", ylab="Korean Burden Inventory")
memPlot <- plot(df$MEM, df$KBI,
main='KBI vs MEM',
xlab="memory and behavioral problems", ylab="Korean Burden Inventory")
cogPlot <- plot(df$COG, df$KBI,
main='KBI vs COG',
xlab="cognitive impairment", ylab="Korean Burden Inventory")
cogPlot
summary(lmCOG)
summary(lmADL)
summary(lmMEM)
summary(lmCOG)
plot(df$ADL, df$KBI,
main='KBI vs ADL',
xlab="total activities of daily living", ylab="Korean Burden Inventory")
abline(lmADL)
plot(df$MEM, df$KBI,
main='KBI vs MEM',
xlab="memory and behavioral problems", ylab="Korean Burden Inventory")
abline(lmMEM)
plot(df$COG, df$KBI,
main='KBI vs COG',
xlab="cognitive impairment", ylab="Korean Burden Inventory")
abline(lmCOG)
print(lmCOG.r.squared)
summary(lmCOG)$r.squared
summary(lmCOG)
summary(lmADL)$r.squared
summary(lmMEM)$r.squared
summary(lmCOG)$r.squared
abline(lmCOG, col = "blue")
abline(lmCOG, col="red")
plot(df$COG, df$KBI,
main='KBI vs COG',
xlab="cognitive impairment", ylab="Korean Burden Inventory")
abline(lmCOG, col="red")
plot(df$COG, df$KBI,
main='KBI vs COG',
xlab="cognitive impairment", ylab="Korean Burden Inventory")
abline(lmCOG, col="blue")
plot(df$ADL, df$KBI,
main='KBI vs ADL',
xlab="total activities of daily living", ylab="Korean Burden Inventory")
abline(lmADL, col="blue")
plot(df$MEM, df$KBI,
main='KBI vs MEM',
xlab="memory and behavioral problems", ylab="Korean Burden Inventory")
abline(lmMEM, col="blue")
plot(df$COG, df$KBI,
main='KBI vs COG',
xlab="cognitive impairment", ylab="Korean Burden Inventory")
abline(lmCOG, col="blue")
